name: Java CI with Gradle

on:
  push:
    branches: [ "release" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  ci-pipeline:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - uses: actions/checkout@v3
      - name: create-json
        id: create-json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "jikgong-firebase.json"
          json: ${{ secrets.JIKGONG_FIREBASE }}
          dir: ./src/main/resources/firebase/

      - name: Run chmod to make graldew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean bootJar -Pspring.profiles.active=prod
          options: '--no-build-cache'

      - name: docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 무중단 배포 시 기존 이미지로 실행되는 것을 막기 위해 a, b로 나눔
      - name: Build jikgong-a Docker Image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/jikgong-a .

      - name: Push jikgong-a Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/jikgong-a

      - name: Build jikgong-b Docker Image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/jikgong-b .

      - name: Push jikgong-b Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/jikgong-b

  cd-pipeline:
    needs: ci-pipeline
    runs-on: ubuntu-latest
    steps:
      # docker compose a 파일 scp
      - uses: actions/checkout@master
      - name: copy docker-compose.a.yml to remote server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "./docker-compose.a.yml"
          target: "/home/ubuntu/"
          debug: true

      # docker compose b 파일 scp
      - uses: actions/checkout@master
      - name: copy docker-compose.b.yml to remote server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "./docker-compose.b.yml"
          target: "/home/ubuntu/"

      - name: copy deploy.sh to remote server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "./deploy.sh"
          target: "/home/ubuntu/"

      - name: Execute deploy.sh script remotely
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            chmod +x /home/ubuntu/deploy.sh
            /home/ubuntu/deploy.sh
            export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}

  notify-slack:
    needs: cd-pipeline
    runs-on: ubuntu-latest
    if: always() # 이 작업은 성공하거나 취소되었을 때에도 실행
    steps:
      - name: action-slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.cd-pipeline.result }}
          author_name: jikgong backend - prod
          fields: repo,commit,message,author
          mention: here
          if_mention: failure,cancelled
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

